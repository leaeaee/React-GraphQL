{"ast":null,"code":"var _jsxFileName = \"/Users/leavidovic/Desktop/web-shop/frontend/src/features/favorites/Favorites.jsx\";\nimport React, { Component } from 'react';\nimport AuthContext from '../../context/auth-context';\nimport Spinner from '../../Spinner/Spinner';\nimport FavoritesList from './FavoritesList';\n\nclass Favorites extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isLoading: false,\n      favoritesList: []\n    };\n\n    this.fetchFavoritesItem = () => {\n      this.setState({\n        isLoading: true\n      });\n      const requestBody = {\n        query: \"\\n          query {\\n            favorites {\\n              _id\\n             createdAt\\n             product {\\n              _id\\n              title\\n              price\\n              description\\n              date\\n              }\\n            }\\n          }\\n        \"\n      };\n      fetch('http://localhost:8080/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + this.context.token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const favoritesList = resData.data.favorites.filter(item => item !== null);\n        this.setState({\n          favoritesList: favoritesList,\n          isLoading: false\n        });\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          isLoading: false\n        });\n      });\n    };\n\n    this.removeFromFavorites = favoritesId => {\n      console.log('removeFromFav', favoritesId);\n      this.setState({\n        isLoading: true\n      });\n      const requestBody = {\n        query: \"\\n          mutation{\\n            removeFromFavorites(favoritesId: \\\"\".concat(favoritesId, \"\\\"){\\n              _id\\n            }\\n          }\\n        \")\n      };\n      fetch('http://localhost:8080/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer ' + this.context.token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) throw new Error('Failed!');\n        return res.json();\n      }).then(resData => {\n        this.setState(prevStat => {\n          const updatedFavorites = prevStat.favoritesList.filter(product => {\n            return product._id !== favoritesId;\n          });\n          return {\n            favoritesList: updatedFavorites,\n            isLoading: false\n          };\n        });\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          isLoading: false\n        });\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.fetchFavoritesItem();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, this.state.isLoading ? React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }) : React.createElement(FavoritesList, {\n      favoritesList: this.state.favoritesList,\n      onDelete: this.removeFromFavorites,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }));\n  }\n\n}\n\nFavorites.contextType = AuthContext;\nexport default Favorites;","map":{"version":3,"sources":["/Users/leavidovic/Desktop/web-shop/frontend/src/features/favorites/Favorites.jsx"],"names":["React","Component","AuthContext","Spinner","FavoritesList","Favorites","state","isLoading","favoritesList","fetchFavoritesItem","setState","requestBody","query","fetch","method","body","JSON","stringify","headers","Authorization","context","token","then","res","status","Error","json","resData","data","favorites","filter","item","catch","err","console","log","removeFromFavorites","favoritesId","prevStat","updatedFavorites","product","_id","componentDidMount","render","contextType"],"mappings":"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","sourcesContent":["import React, { Component} from 'react';\n\nimport AuthContext from '../../context/auth-context'\nimport Spinner from '../../Spinner/Spinner'\nimport FavoritesList from './FavoritesList'\n\nclass Favorites extends Component{\n  state = {\n    isLoading: false,\n    favoritesList: [],\n  }\n\n  static contextType = AuthContext;\n\n  componentDidMount(){\n    this.fetchFavoritesItem();\n  }\n\n  fetchFavoritesItem = () => {\n    this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n          query {\n            favorites {\n              _id\n             createdAt\n             product {\n              _id\n              title\n              price\n              description\n              date\n              }\n            }\n          }\n        `\n    };\n\n    fetch('http://localhost:8080/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const favoritesList = resData.data.favorites.filter(item => item !== null);\n        this.setState({ favoritesList: favoritesList, isLoading: false });\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({ isLoading: false });\n      });\n  };\n\n  removeFromFavorites = favoritesId => {\n    console.log('removeFromFav', favoritesId);\n    this.setState({isLoading: true})\n    const requestBody = {\n      query: `\n          mutation{\n            removeFromFavorites(favoritesId: \"${favoritesId}\"){\n              _id\n            }\n          }\n        `\n    };\n\n    fetch('http://localhost:8080/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) throw new Error('Failed!');\n        return res.json();\n      })\n      .then(resData => {\n        this.setState(prevStat => {\n          const updatedFavorites = prevStat.favoritesList.filter(product => {\n            return product._id !== favoritesId;\n          })\n          return {favoritesList: updatedFavorites, isLoading: false}\n        })\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({isLoading: false})\n      });\n  }\n\n  render(){\n  return (\n      <div>\n        {this.state.isLoading\n          ? <Spinner />\n          : (<FavoritesList\n            favoritesList={this.state.favoritesList}\n            onDelete={this.removeFromFavorites}\n          />)}\n    </div>\n    )\n  }\n}\n\nexport default Favorites;\n"]},"metadata":{},"sourceType":"module"}