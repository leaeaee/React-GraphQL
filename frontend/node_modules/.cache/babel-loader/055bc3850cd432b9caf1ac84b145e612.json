{"ast":null,"code":"var _jsxFileName = \"/Users/leavidovic/Desktop/web-shop/frontend/src/features/cart/Cart.js\";\nimport React, { Component } from 'react';\nimport Modal from '../modal/Modal';\nimport Backdrop from '../../Backdrop/Backdrop';\nimport AuthContext from '../../context/auth-context';\nimport Spinner from '../../Spinner/Spinner';\nimport CartList from './CartList';\n\nclass Cart extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isLoading: false,\n      cartList: [],\n      productsList: [],\n      selectedProduct: null,\n      orderedProducts: [],\n      orderPrice: ''\n    };\n\n    this.modalCancelHandler = () => this.setState({\n      selectedProduct: null\n    });\n\n    this.fetchCartsItem = () => {\n      this.setState({\n        isLoading: true\n      });\n      const requestBody = {\n        query: \"\\n          query {\\n            cart {\\n              _id\\n             createdAt\\n             size\\n             product {\\n               _id\\n               title\\n               price\\n               description\\n               date\\n             }\\n            }\\n          }\\n        \"\n      };\n      fetch('http://localhost:8080/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + this.context.token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) throw new Error('Failed!');\n        return res.json();\n      }).then(resData => {\n        console.log('CART', resData.data.cart);\n        const cartList = resData.data.cart.filter(item => item !== null);\n        const productsList = cartList.map(cart => cart.product);\n        this.setState({\n          cartList: cartList,\n          isLoading: false,\n          productsList\n        });\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          isLoading: false\n        });\n      });\n    };\n\n    this.removeFromCart = cartId => {\n      this.setState({\n        isLoading: true\n      });\n      const requestBody = {\n        query: \"\\n        mutation {\\n          removeFromCart(cartId: \\\"\".concat(cartId, \"\\\"){\\n            _id\\n          }\\n        }\\n        \")\n      };\n      fetch('http://localhost:8080/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + this.context.token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        this.setState(prevStat => {\n          const updatedCart = prevStat.cartList.filter(product => product._id !== cartId);\n          return {\n            cartList: updatedCart,\n            isLoading: false\n          };\n        });\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          isLoading: false\n        });\n      });\n    };\n\n    this.handleOrderAll = () => {\n      const productsForRequest = this.state.productsList.map(p => ({\n        title: p.title,\n        description: p.description,\n        price: p.price,\n        date: p.date\n      }));\n      const graphqlCompatibleArrayString = '[' + productsForRequest.map(p => \"{\\n          title: \\\"\".concat(p.title, \"\\\",\\n          description: \\\"\").concat(p.description, \"\\\",\\n          price: \").concat(p.price, \",\\n          date: \\\"\").concat(p.date, \"\\\",\\n        }\")) + ']';\n      const requestBody = {\n        query: \"\\n      mutation {\\n        makeOrder(\\n          order: {\\n            products: \".concat(graphqlCompatibleArrayString, \"\\n          } ) {\\n          products {\\n            title\\n            price\\n          }\\n        }\\n      }\")\n      };\n      fetch('http://localhost:8080/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + this.context.token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) throw new Error('Failed!');\n        return res.json();\n      }).then(resData => {\n        console.log('MAKE ORDER RESULT:', resData.data.makeOrder.products);\n        const orderedProducts = resData.data.makeOrder.products.filter(item => item !== null);\n        this.setState({\n          orderedProducts: orderedProducts\n        });\n      }).catch(err => console.log(err));\n    };\n  }\n\n  componentDidMount() {\n    this.fetchCartsItem();\n  }\n\n  // totalOrderPrice = () => {\n  //   console.log('kod izračuna', this.state.orderedProducts.price)\n  //   const res = this.state.orderedProducts.price.reduce((total,currentValue) => {\n  //     return total + currentValue;\n  //   });\n  //   console.log('Rezultat naruđbe', res);\n  //   return res;\n  // };\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }), this.state.isLoading ? React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }) : React.createElement(CartList, {\n      cartList: this.state.cartList,\n      onDelete: this.removeFromCart,\n      handleOrderAll: this.handleOrderAll,\n      orderedProducts: this.state.orderedProducts,\n      totalOrderPrice: this.totalOrderPrice,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }), console.log('Ordered products state', this.state.orderedProducts), this.state.selectedProduct && React.createElement(Backdrop, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }), this.state.selectedProduct && React.createElement(Modal, {\n      title: this.state.selectedProduct.product.title,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.orderProductHandler,\n      confirmText: this.context.token ? 'Order' : 'Confirm',\n      selectedSize: this.state.selectedSize,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, this.state.selectedProduct.product.title), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }, \"$\", this.state.selectedProduct.product.price)));\n  }\n\n}\n\nCart.contextType = AuthContext;\nexport default Cart;","map":{"version":3,"sources":["/Users/leavidovic/Desktop/web-shop/frontend/src/features/cart/Cart.js"],"names":["React","Component","Modal","Backdrop","AuthContext","Spinner","CartList","Cart","state","isLoading","cartList","productsList","selectedProduct","orderedProducts","orderPrice","modalCancelHandler","setState","fetchCartsItem","requestBody","query","fetch","method","body","JSON","stringify","headers","Authorization","context","token","then","res","status","Error","json","resData","console","log","data","cart","filter","item","map","product","catch","err","removeFromCart","cartId","prevStat","updatedCart","_id","handleOrderAll","productsForRequest","p","title","description","price","date","graphqlCompatibleArrayString","makeOrder","products","componentDidMount","render","totalOrderPrice","orderProductHandler","selectedSize","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport Modal from '../modal/Modal';\nimport Backdrop from '../../Backdrop/Backdrop';\nimport AuthContext from '../../context/auth-context';\nimport Spinner from '../../Spinner/Spinner';\nimport CartList from './CartList';\n\nclass Cart extends Component {\n  state = {\n    isLoading: false,\n    cartList: [],\n    productsList: [],\n    selectedProduct: null,\n    orderedProducts: [],\n    orderPrice: ''\n  };\n\n  static contextType = AuthContext;\n\n  componentDidMount() {\n    this.fetchCartsItem();\n  }\n  modalCancelHandler = () => this.setState({ selectedProduct: null });\n\n  fetchCartsItem = () => {\n    this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n          query {\n            cart {\n              _id\n             createdAt\n             size\n             product {\n               _id\n               title\n               price\n               description\n               date\n             }\n            }\n          }\n        `\n    };\n\n    fetch('http://localhost:8080/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) throw new Error('Failed!');\n        return res.json();\n      })\n      .then(resData => {\n        console.log('CART', resData.data.cart);\n        const cartList = resData.data.cart.filter(item => item !== null);\n        const productsList = cartList.map(cart => cart.product);\n        this.setState({ cartList: cartList, isLoading: false, productsList });\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({ isLoading: false });\n      });\n  };\n\n  removeFromCart = cartId => {\n    this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n        mutation {\n          removeFromCart(cartId: \"${cartId}\"){\n            _id\n          }\n        }\n        `\n    };\n\n    fetch('http://localhost:8080/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        this.setState(prevStat => {\n          const updatedCart = prevStat.cartList.filter(product => product._id !== cartId);\n          return { cartList: updatedCart, isLoading: false };\n        });\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({ isLoading: false });\n      });\n  };\n\n  handleOrderAll = () => {\n    const productsForRequest = this.state.productsList.map(p => ({\n      title: p.title,\n      description: p.description,\n      price: p.price,\n      date: p.date\n    }));\n\n    const graphqlCompatibleArrayString =\n      '[' +\n      productsForRequest.map(\n        p => `{\n          title: \"${p.title}\",\n          description: \"${p.description}\",\n          price: ${p.price},\n          date: \"${p.date}\",\n        }`\n      ) +\n      ']';\n\n    const requestBody = {\n      query: `\n      mutation {\n        makeOrder(\n          order: {\n            products: ${graphqlCompatibleArrayString}\n          } ) {\n          products {\n            title\n            price\n          }\n        }\n      }`\n    };\n\n    fetch('http://localhost:8080/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) throw new Error('Failed!');\n        return res.json();\n      })\n      .then(resData => {\n        console.log('MAKE ORDER RESULT:', resData.data.makeOrder.products)\n        const orderedProducts = resData.data.makeOrder.products.filter(item => item !== null);\n        this.setState({ orderedProducts: orderedProducts });        \n      })\n      .catch(err => console.log(err));\n  };\n\n  // totalOrderPrice = () => {\n  //   console.log('kod izračuna', this.state.orderedProducts.price)\n  //   const res = this.state.orderedProducts.price.reduce((total,currentValue) => {\n  //     return total + currentValue;\n  //   });\n  //   console.log('Rezultat naruđbe', res);\n  //   return res;\n  // };\n\n  render() {\n    return (\n      <div>\n        <p>\n        </p>\n        {this.state.isLoading ? (\n          <Spinner />\n        ) : (\n          <CartList\n            cartList={this.state.cartList}\n            onDelete={this.removeFromCart}\n            handleOrderAll={this.handleOrderAll}\n            orderedProducts={this.state.orderedProducts}\n            totalOrderPrice={this.totalOrderPrice}\n          />\n        )}\n        {console.log('Ordered products state', this.state.orderedProducts)}\n        {this.state.selectedProduct && <Backdrop />}\n        {this.state.selectedProduct && (\n          <Modal\n            title={this.state.selectedProduct.product.title}\n            canCancel\n            canConfirm\n            onCancel={this.modalCancelHandler}\n            onConfirm={this.orderProductHandler}\n            confirmText={this.context.token ? 'Order' : 'Confirm'}\n            selectedSize={this.state.selectedSize}\n          >\n            <h1>{this.state.selectedProduct.product.title}</h1>\n            <h2>${this.state.selectedProduct.product.price}</h2>\n            {/* <p>{this.state.selectedProduct.description}</p> */}\n          </Modal>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Cart;\n"]},"metadata":{},"sourceType":"module"}